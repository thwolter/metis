from __future__ import annotations

from datetime import datetime, timezone
from enum import Enum
from typing import Any
from uuid import UUID, uuid4

from pydantic import ConfigDict
from sqlalchemy import JSON, Column, Index, UniqueConstraint
from sqlmodel import Field, SQLModel


class JobStatus(str, Enum):
    QUEUED = 'queued'
    RUNNING = 'running'
    SUCCEEDED = 'succeeded'
    FAILED = 'failed'
    CANCELED = 'canceled'


class BaseSQLModel(SQLModel):
    model_config = ConfigDict(arbitrary_types_allowed=True, from_attributes=True)  # type: ignore[bad-override]


class Job(BaseSQLModel, table=True):
    """Metadata processing job as persisted in the metadata.metadata_jobs table."""

    __tablename__ = 'metadata_jobs'  # type: ignore[bad-argument-type]
    __table_args__ = (
        UniqueConstraint(
            'tenant_id',
            'document_id',
            'profile',
            'ingestion_fingerprint',
            name='uq_job_idempotency',
        ),
        Index('ix_jobs_status_priority_created', 'status', 'priority', 'created_at'),
        Index('ix_jobs_tenant_created', 'tenant_id', 'created_at'),
        {'schema': 'metadata'},
    )

    job_id: UUID = Field(default_factory=uuid4, primary_key=True)
    tenant_id: UUID
    document_id: UUID
    profile: str
    ingestion_fingerprint: str
    status: JobStatus = Field(default=JobStatus.QUEUED)
    priority: int = Field(default=5)
    retries: int = Field(default=0)
    error_type: str | None = None
    error_msg: str | None = None
    created_at: datetime = Field(default_factory=lambda: datetime.now(timezone.utc))
    started_at: datetime | None = None
    finished_at: datetime | None = None
    processing_fingerprint: str | None = None
    callback_url: str | None = None
    idempotency_key: str | None = None
    context: dict[str, Any] = Field(
        default_factory=dict,
        sa_column=Column(JSON, nullable=False),
        description='Context payload required by the agent.',
    )
    input_metadata: dict[str, Any] | None = Field(
        default=None,
        sa_column=Column(JSON, nullable=True),
        description='Optional metadata provided with the job request.',
    )
    locked_fields: list[str] = Field(
        default_factory=list,
        sa_column=Column(JSON, nullable=False),
        description='Metadata fields that must not be overwritten by the agent.',
    )


class DocumentMetadata(BaseSQLModel, table=True):
    """Versioned metadata payload generated by the agent."""

    __tablename__ = 'document_metadata'  # type: ignore[bad-argument-type]
    __table_args__ = (
        Index('ix_docmeta_doc_version', 'document_id', 'version', unique=True),
        {'schema': 'metadata'},
    )

    document_id: UUID = Field(primary_key=True)
    version: int = Field(primary_key=True)
    fingerprint: str
    extracted_on: datetime = Field(default_factory=lambda: datetime.now(timezone.utc))
    payload: dict[str, Any] = Field(
        sa_column=Column(JSON, nullable=False),
        description='Full metadata payload as JSON.',
    )
